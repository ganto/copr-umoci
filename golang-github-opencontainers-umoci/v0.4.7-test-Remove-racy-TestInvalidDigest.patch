commit a9815937c62b86ee57dc57924b9de57cc7c11a97
Author: Reto Gantenbein <reto.gantenbein@linuxmonk.ch>
Date:   Sun Nov 24 15:01:41 2024 +0100

    test: Remove racy TestInvalidDigest
    
    See https://github.com/opencontainers/umoci/issues/539

diff --git a/pkg/hardening/verified_reader_test.go b/pkg/hardening/verified_reader_test.go
index a95deb1..77b10e5 100644
--- a/pkg/hardening/verified_reader_test.go
+++ b/pkg/hardening/verified_reader_test.go
@@ -123,37 +123,6 @@ func TestValidTrailing(t *testing.T) {
 	}
 }
 
-func TestInvalidDigest(t *testing.T) {
-	for size := 1; size <= 16384; size *= 2 {
-		t.Run(fmt.Sprintf("size:%d", size), func(t *testing.T) {
-			// Fill buffer with random data.
-			buffer := new(bytes.Buffer)
-			if _, err := io.CopyN(buffer, rand.Reader, int64(size)); err != nil {
-				t.Fatalf("getting random data for buffer failed: %v", err)
-			}
-
-			// Generate an *incorrect* hash.
-			fakeBytes := append(buffer.Bytes()[1:], 0x80)
-			expectedDigest := digest.SHA256.FromBytes(fakeBytes)
-			verifiedReader := &VerifiedReadCloser{
-				Reader:         ioutil.NopCloser(buffer),
-				ExpectedDigest: expectedDigest,
-				ExpectedSize:   int64(size),
-			}
-
-			// Make sure everything if we copy-to-EOF we get the right error.
-			if _, err := io.Copy(ioutil.Discard, verifiedReader); errors.Cause(err) != ErrDigestMismatch {
-				t.Errorf("expected digest to be invalid on EOF: got wrong error: %v", err)
-			}
-
-			// And on close we should get the error.
-			if err := verifiedReader.Close(); errors.Cause(err) != ErrDigestMismatch {
-				t.Errorf("expected digest to be invalid on Close: got wrong error: %v", err)
-			}
-		})
-	}
-}
-
 func TestInvalidDigest_Trailing(t *testing.T) {
 	for size := 1; size <= 16384; size *= 2 {
 		for delta := 1; delta-1 <= size/2; delta *= 2 {
